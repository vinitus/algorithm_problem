# 이석원은 조규현과 백승환에게 상대편 마린(류재명)의 위치를 계산하라는 명령을 내렸다. 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.

# 조규현의 좌표 (x1, y1)와 백승환의 좌표 (x2, y2)가 주어지고, 조규현이 계산한 류재명과의 거리 r1과 백승환이 계산한 류재명과의 거리 r2가 주어졌을 때, 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 이루어져 있다.

# 한 줄에 x1, y1, r1, x2, y2, r2가 주어진다. x1, y1, x2, y2는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 정수이고, r1, r2는 10,000보다 작거나 같은 자연수이다.

# 출력
# 각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.

T = int(input())
for TT in range(T):
    x1, y1, r1, x2, y2, r2 = map(int,input().split())
    length = ((x1 - x2)**2 + (y1 - y2)**2)**0.5 # 원점 사이의 거리
    if length == 0: # 원점이 같다면
        if r1 == r2:        # 두 원이 같다면 원의 어느 점에서든 같은 지점을 나타냄
            print('-1')
        else:               # 원점이 같지만 반지름이 다르다면 만날 수없다
            print('0')
    else:           # 원점이 같지 않다면
        length_list = [length,r1,r2]    # 계산상의 편의를 위한 list
        length_list.sort()              # 정렬해서 작은 순서대로 정렬
        # 만나지 않으려면 거리가 반지름의 합보다 멀거나 작은 원이 원내부에 있어서 만나지 않아야함
        # 전자나 후자의 경우를 보면 가장 큰 수가 작은 수들의 합보다 커야함
        if length_list[2] > length_list[0] + length_list[1]:
            print('0')
        # 1개에서 만나는 경우 -> 외접과 내접
        elif length_list[2] == length_list[0] + length_list[1]:
            print("1")  # 외접의 경우 length = r1 + r2, 내접의 경우 큰 원 반지름 = 거리 + 작은 원 반지름
        else:           # 그밖의 모든 경우는 2개의 점에서 만남
            print("2")